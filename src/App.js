import './App.css';
import './index.css';
import './default.css';

import excelReader from './img/excelReader.svg';
import barChart from './img/barChart.svg';
import cellSplitter from './img/cellSplitter.svg';
import csvReader from './img/csvReader.svg';
import groupBy from './img/groupBy.svg';
import jsonReader from './img/jsonReader.svg';
import linePlot from './img/linePlot.svg';
import PDFParser from './img/PDFParser.svg';
import pythonScript from './img/pythonScript.svg';
import Rank from './img/Rank.svg';
import stringManipulation from './img/stringManipulation.svg';
import tableManipulator from './img/tableManipulator.svg';

import {useEffect, useState} from "react";
import {Link, Route, Routes, useNavigate} from "react-router-dom";
import {News} from "./Components/News/News";

import {Main} from "./Pages/Main/Main";
import {Footer} from "./Components/Footer/Footer";
import {Header} from "./Components/Header/Header";
import {RoutesPage} from "./Pages/RoutesPage/RoutesPage";
import {Documentation} from "./Pages/Documentation/Documentation";
import {TryKNIME} from "./Pages/TryKNIME/TryKNIME";

function App() {
    const anchors = document.querySelectorAll('a[href^="#"]')
    for (let anchor of anchors) {
        anchor.addEventListener("click", function (e) {
            e.preventDefault()
            const goto = anchor.hasAttribute('href') ? anchor.getAttribute('href') : 'body'
            document.querySelector(goto).scrollIntoView({
                behavior: "smooth",
                block: "start"
            })
        })
    }

    const [news, setNews] = useState([
        {
            title: 'Excel Reader',
            description: `Этот узел читает файлы Excel (форматы xlsx, xlsm, xlsb и xls). Он может читать один или несколько файлов одновременно, но только один лист в файле. Поддерживаемые типы Excel, которые можно прочитать, это строка, число, логическое значение, дата и время, но не картинки, диаграммы и т.д.
                        \nДанные считываются и преобразуются в типы KNIME: строка, целое число, длинное число, число с плавающей точкой, логическое значение, локальная дата, локальное время и локальная дата и время. При выполнении узел сканирует входной файл, чтобы определить количество и типы столбцов и выводит таблицу с автоматически определенной структурой и типами KNIME.
                        \nФормулы также могут быть прочитаны и пересчитаны при необходимости. Производительность этого узла ограничена (из-за основной библиотеки проекта Apache POI). Чтение больших файлов занимает много времени и памяти (особенно файлов в формате xlsx при включенном пересчете формул).
                        \nДиалог этого узла показывает предварительный просмотр и содержимое файла. В то время как предварительный просмотр показывает таблицу, которая будет считана с применением настроек и обновляется при изменении любой настройки, содержимое файла показывает содержимое файла так, как оно отображается в Excel. Это позволяет легче находить номера строк и названия столбцов для указания разных настроек.`,
            img: excelReader,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.ext.poi/latest/org.knime.ext.poi3.node.io.filehandling.excel.reader.ExcelTableReaderNodeFactory',
            id: 0,
        },
        {
            title: 'CSV Reader',
            description: `Читает файлы CSV. Чтобы автоматически определить структуру файла, нажмите кнопку «Автоопределение формата». Если вы столкнулись с проблемами, связанными с неправильными угадываемыми типами данных, отключите параметр Ограничить число сканируемых строк данных на вкладке «Дополнительные параметры». Если структура входного файла изменяется между различными вызовами, включите параметр «Поддержка изменения файловых схем» на вкладке «Дополнительные параметры». Дополнительные сведения см. в Руководстве по работе с файлами KNIME. Руководство по работе с файлами.
                        \nПримечание: Если вы обнаружите, что этот узел не может прочитать ваш файл, попробуйте узел File Reader. Он предлагает больше возможностей для чтения сложных файлов.
                        \nЭтот узел может получить доступ к множеству различных файловых систем. Дополнительные сведения об обработке файлов см.`,
            img: csvReader,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.base/latest/org.knime.base.node.io.filehandling.csv.reader.CSVTableReaderNodeFactory',
            id: 1,
        },
        {
            title: 'JSON Reader',
            description: `Этот узел считывает .файл json и введите его в качестве значения JSON.
                        \nВыберите, хотите ли вы прочитать один файл или несколько файлов в папке. При чтении файлов в папке вы можете установить фильтры, чтобы указать, какие файлы и вложенные папки следует включать.`,
            img: jsonReader,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.json/latest/org.knime.json.node.filehandling.reader.JSONReaderNodeFactory',
            id: 2,
        },
        {
            title: 'String Manipulation',
            description: `Выполняет такие манипуляции со строками, как поиск и замена, ввод заглавных букв или удаление начальных и конечных пробелов.
                        \nОбратите внимание, что строки, которые являются частью выражения и не являются входными данными (или результатом другого обернутого вызова функции), должны быть заключены в двойные кавычки ('"'). Кроме того, если строка содержит символ кавычки, она должна быть экранирована с помощью символа обратной косой черты ('\"'). Наконец, другие специальные символы, такие как одинарные кавычки и обратная косая черта, необходимо экранировать с помощью обратной косой черты. Например, одна обратная косая черта в строке записывается в виде двух последовательных символов обратной косой черты; первый действует как экранирующий символ для второго.`,
            img: stringManipulation,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.javasnippet/latest/org.knime.base.node.preproc.stringmanipulation.StringManipulationNodeFactory',
            id: 3,
        },
        {
            title: 'Cell Splitter',
            description: `Этот узел использует указанный пользователем символ-разделитель для разделения содержимого выбранного столбца на части. Он добавляет либо фиксированное количество столбцов во входную таблицу, каждый из которых содержит одну часть исходного столбца, либо один столбец, содержащий коллекцию (список или набор) ячеек с разделенным выводом. Можно указать, состоит ли вывод из одного или нескольких столбцов, только из одного столбца, содержащего ячейки списка, или только из одного столбца, содержащего заданные ячейки, в которых удаляются дубликаты.
                        \nЕсли столбец содержит больше разделителей, чем необходимо (что приводит к большему количеству частей, чем доступно добавленных столбцов), дополнительные разделители игнорируются (в результате последний столбец содержит неразделенную остальную часть столбца).
                        \nЕсли выбранный столбец содержит слишком мало разделителей (что приводит к меньшему количеству частей, чем ожидалось), в этой строке будут созданы пустые столбцы.
                        \nВ зависимости от разделителей и результирующих частей ячейки коллекции могут иметь разные размеры. Содержимое новых столбцов будет урезано, если указано (т.е. начальные и конечные пробелы будут удалены).`,
            img: cellSplitter,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.base/latest/org.knime.base.node.preproc.cellsplit2.CellSplitter2NodeFactory',
            id: 4,
        },
        {
            title: 'Bar Chart',
            description: `Узел визуализации столбчатой диаграммы.Доступ к представлению можно получить либо с помощью действия “интерактивный просмотр” на исполняемом узле, либо на веб-портале KNIME.
                        \nВ конфигурации узла вы можете выбрать метод агрегирования и включить определенные элементы управления, которые затем будут доступны в представлении. Это включает в себя возможность выбирать разные столбцы для оси категорий и частот или возможность задать заголовок. Конфигурация также предлагает предварительный просмотр представления, что должно помочь быстро придать столбчатой диаграмме желаемую форму. Поскольку отсутствующие значения, а также NaN (не число) или бесконечные значения не могут быть отображены в представлении, они будут опущены.
                        \nОбратите внимание, что этот узел в настоящее время находится в стадии разработки. Будущие версии узла могут иметь улучшенную или измененную функциональность.`,
            img: barChart,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.base.views/latest/org.knime.base.views.node.barchart.BarChartNodeFactory',
            id: 5,
        },
        {
            title: 'Python Script',
            description: `Узел позволяет выполнять скрипт на Python в локальной среде Python 3. Среда должна быть настроена в разделе File → Preferences → KNIME → Python или через переменную потока. Несколько входных и выходных портов различных типов могут динамически добавляться к узлу и использоваться в скрипте. Кроме того, узел позволяет импортировать записные книжки Jupyter в виде модулей Python через модуль knime.scripting.jupyter, который может быть импортирован в скрипт. Подробное описание полного API приведено в документации по API.
                        \nУзел обеспечивает значительное повышение производительности по сравнению с узлами устаревшей интеграции KNIME с Python и позволяет работать с данными, объем которых превышает объем памяти. `,
            img: pythonScript,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.python3.scripting/latest/org.knime.python3.scripting.nodes.script.PythonScriptNodeFactory',
            id: 6,
        },
        {
            title: 'Table Manipulator',
            description: `Позволяет выполнять несколько преобразований столбцов в любом количестве входных таблиц, таких как переименование, фильтрация, изменение порядка и типа входных столбцов.
                        \nЕсли доступно более одной входной таблицы, узел объединяет все входные строки в единую результирующую таблицу. Если входные таблицы содержат один и тот же идентификатор строки, узел может либо сгенерировать новый идентификатор строки, либо добавить индекс входной таблицы к исходному идентификатору строки соответствующей входной таблицы.`,
            img: tableManipulator,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.base/latest/org.knime.base.node.preproc.manipulator.TableManipulatorNodeFactory',
            id: 7,
        },
        {
            title: 'GroupBy',
            description: `Группирует строки таблицы по уникальным значениям в выбранных столбцах группы. Для каждого уникального набора значений столбца выбранной группы создается строка. Остальные столбцы агрегируются на основе указанных параметров агрегирования. Выходная таблица содержит по одной строке для каждой уникальной комбинации значений выбранных столбцов группы.
                        \nСтолбцы для агрегирования можно определить либо путем прямого выбора столбцов, либо по имени на основе шаблона поиска, либо на основе типа данных. Входные столбцы обрабатываются в таком порядке и учитываются только один раз, например, столбцы, добавленные непосредственно на вкладке "Ручная агрегация", игнорируются, даже если их имя соответствует шаблону поиска на вкладке "Агрегация на основе шаблона" или их тип соответствует определенному типу на вкладке "Агрегация на основе типа". То же самое относится и к столбцам, добавляемым на основе шаблона поиска. Они игнорируются, даже если они соответствуют критерию, который был определен на вкладке "Агрегирование на основе типов".
                        \nВкладка "Ручное агрегирование" позволяет вам изменить метод агрегирования более чем для одного столбца. Для этого выберите столбцы для изменения, откройте контекстное меню щелчком правой кнопки мыши и выберите используемый метод агрегирования.
                        \nНа вкладке "Агрегирование на основе шаблона" вы можете назначить методы агрегирования столбцам на основе шаблона поиска. Шаблоном может быть либо строка с подстановочными знаками, либо регулярное выражение . Столбцы, название которых соответствует шаблону, но тип данных которых несовместим с выбранным методом агрегирования, игнорируются. Учитываются только столбцы, которые не были выбраны в качестве столбца группы или которые не были выбраны в качестве столбца агрегирования на вкладке "Ручное агрегирование".
                        \nВкладка "Агрегирование на основе типа" позволяет выбрать метод агрегирования для всех столбцов определенного типа данных, например, вычислить среднее значение для всех десятичных столбцов (двойная ячейка). Учитываются только столбцы, которые не были обработаны другими вкладками, например, group, column based и pattern based. Список типов данных для выбора содержит основные типы, например String, Double и т.д., а также все типы данных, содержащиеся в текущей таблице ввода.
                        \nПодробное описание доступных методов агрегирования можно найти на вкладке "Описание" в диалоговом окне узла.`,
            img: groupBy,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.base/latest/org.knime.base.node.preproc.groupby.GroupByNodeFactory',
            id: 8,
        },
        {
            title: 'PDF Parser',
            description: `Этот узел позволяет вам читать PDF-документы и создавать документ для каждого файла. Название документа и его авторы будут извлечены из метаданных Pdf. Извлекается полный текст PDF-файла, структура PDF-файла не принимается во внимание. Для извлечения текста используется библиотека PDFBox. `,
            img: PDFParser,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.ext.textprocessing/latest/org.knime.ext.textprocessing.nodes.source.parser.pdf.PDFDocumentParserNodeFactory',
            id: 9,
        },
        {
            title: 'Rank',
            description: `Для каждой группы рассчитывается индивидуальное ранжирование на основе выбранных атрибутов ранжирования и режима ранжирования. Пользователь должен предоставить по крайней мере один атрибут, по которому должен быть рассчитан рейтинг.
                        \nГруппы определяются уникальными комбинациями значений атрибута(ов) группировки. Если атрибут группировки не указан, для всей таблицы будет рассчитан один рейтинг.
                        \nСчитается, что пропущенные значения представляют собой максимально возможное значение.
                        \nСтолбцы во входной таблице будут называться "атрибутами", чтобы избежать путаницы со структурами таблиц в диалоговом окне.`,
            img: Rank,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.base/latest/org.knime.base.node.preproc.rank.RankNodeFactory',
            id: 10,
        },
        {
            title: 'Line Plot',
            description: `Линейный график с использованием библиотеки графиков на основе JavaScript. Доступ к представлению можно получить либо с помощью действия интерактивного просмотра на исполняемом узле, либо на веб-портале KNIME.
                        \nКонфигурация узла позволяет вам выбрать размер выборки для отображения и включить определенные элементы управления, которые затем становятся доступными в представлении. Это включает в себя возможность выбирать разные столбцы для x и y или возможность задать заголовок. Включение или отключение этих элементов управления с помощью диалогового окна настройки на первый взгляд может показаться бесполезным, но имеет преимущества при использовании в веб-портале / мастере выполнения, где конечный пользователь не имеет доступа к самому рабочему процессу.
                        \nВторой порт ввода предоставляет возможность задавать цвета для различных линий/столбцов на графике. Поэтому добавьте заголовок столбца Extract и перенесите узел в таблицу данных, которая должна быть отображена в этом узле. Затем используйте диспетчер цветов, чтобы добавить цвета на основе названий отдельных столбцов. Узел автоматически выбирает столбец из диспетчера цветов и присваивает значения цвета построенным столбцам.
                        \nДополнительно может быть отрисовано статическое SVG-изображение, которое затем становится доступным на первом выходном порту.
                        \nОбратите внимание, что этот узел в настоящее время находится в стадии разработки. Будущие версии узла могут иметь больше или измененную функциональность.`,
            img: linePlot,
            link: 'https://hub.knime.com/knime/extensions/org.knime.features.js.views/latest/org.knime.js.base.node.viz.plotter.line.LinePlotNodeFactory',
            id: 11,
        },
    ])
    const [searchValue, setSearchValue] = useState('')
    const [filteredValue, setFilteredValue] = useState('')
    const navigate = useNavigate()
    var maxLength = 180;

    const trimText = (text) => {
        return text.substring(0, maxLength) + '...';
    }

    const countHowMuchElements = () => {
        let temp = news.filter((item,index) => {
            return searchValue.toLowerCase() === '' ? item : item.title.toLowerCase().includes(searchValue)
        })
        setFilteredValue(temp)
    }

    useEffect(() => {
        countHowMuchElements()
    },[searchValue])

    return (
        <div className="App">
            <Header setSearchValue={setSearchValue} searchValue={searchValue} />
            <Routes>
                <Route path={'/'} element={<Main/>}/>
                <Route path={'/routes'} element={<RoutesPage setSearchValue={setSearchValue} trimText={trimText} searchValue={searchValue} news={news} filteredValue={filteredValue}/>}/>
                <Route path={'/routes/news/:id'} element={<News searchValue={searchValue} setSearchValue={setSearchValue} navigate={navigate} news={news}/>}/>
                <Route path={'/documentation'} element={<Documentation />} />
                <Route path={'/tryKNIME'} element={<TryKNIME />} />
            </Routes>
            <Footer/>
        </div>
    );


}

export default App;
